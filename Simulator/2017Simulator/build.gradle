


plugins {
    id 'java'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.5.1'
    id 'application'
    id 'maven-publish'
}


repositories {
    mavenCentral()

    maven {
        url "http://raw.githubusercontent.com/pjreiniger/maven_repo/master/"
    }
}

ext.publishing_path = '/home/pj/GitHub/FIRST/2017/maven_repo/'
if(hasProperty('maven_repo'))
{
    ext.publishing_path = maven_repo
}

sourceSets {
    main
    {
        java
        {
            srcDirs = ["${rootDir}/../../RobotCode/snobot2017/src", "${rootDir}/../../RobotCode/SnobotRobotLibs/src"]
        }
    }
}

configurations {
    zippedDeps
}

dependencies {
    
    // Snobot Sim
    compile    'com.snobot.simulator:snobot_sim_gui:0.1:gui'
    compile    'com.snobot.simulator:snobot_sim_native:0.1:uber_native-linux'
    compile    'com.snobot.simulator:snobot_sim_native:0.1:uber_native-windows'
    zippedDeps 'com.snobot.simulator:snobot_sim_gui:0.1:javadeps@zip'
    
    //// 3rd Party
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile files(System.getProperty("user.home") + "/wpilib/user/java/lib/RIOdroid.jar")
    compile files(System.getProperty("user.home") + "/wpilib/user/java/lib/CTRLib.jar")
    //compile files(System.getProperty("user.home") + "/wpilib/java/current/lib/cscore.jar")
    //
    //// WPI Stuff
    compile fileTree(dir: 'dependencies', include: '*.jar')
    //compile files(System.getProperty("user.home") + "/wpilib/user/java/lib/strongback.jar")
    //compile files(System.getProperty("user.home") + "/wpilib/user/java/lib/navx_frc.jar")
    
    runtime 'edu.wpi.first.ntcore:ntcore-jni:+:all'
}

configurations.zippedDeps.files.each { file ->

    copy {
        def depName = file.name.substring(0, file.name.indexOf('-'))
        from zipTree(file) 
        into "."
        
        exclude "jinput-platform*.jar"
    }
}

configurations.compile.files.each { file ->
    println "Compile dependency: " + file
    copy {
        from file
        into "dependencies/"
        include "snobot_sim*"
        include "ctre_override*"
    }
}

jar {
    dependsOn { classes }
    
    manifest {
      attributes(
        'Main-Class': 'com.snobot.simulator.Main'
      )
    }
}

clean {
    delete fileTree("dependencies") {
        include "*.jar"
    }
}

// Include more stuff in the application
distributions {
    main {
        contents {
            from("dependencies") {
                into "lib"
                include "*.dll"
                include "*.so"
            }
        }
    }
    
}

publishing {

   repositories {
      maven {
      	url publishing_path
      }
   }
	
   publications {
      create(MavenPublication ) {
         artifact distZip
         
         groupId 'com.snobot.simulator'
         artifactId 'Simulator'
         version '1.0'
      }
   }
}

mainClassName = "com.snobot.simulator.Main"
applicationDefaultJvmArgs = ["-Djava.library.path=libs"]
